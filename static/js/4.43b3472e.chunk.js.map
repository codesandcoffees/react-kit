{"version":3,"sources":["containers/Counter/Counter.js"],"names":["Container","styled","div","_templateObject","CounterContainer","_this","Object","_home_travis_build_codesandcoffees_react_kit_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_home_travis_build_codesandcoffees_react_kit_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_codesandcoffees_react_kit_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","val","customValChange","bind","_home_travis_build_codesandcoffees_react_kit_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__","customValReset","e","setState","target","value","_this$props","props","total","counterIncrease","counterDecrease","counterReset","react__WEBPACK_IMPORTED_MODULE_8___default","a","createElement","_components__WEBPACK_IMPORTED_MODULE_12__","label","onClick","type","onChange","min","React","Component","connect","counter","dispatch","_home_travis_build_codesandcoffees_react_kit_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","bindActionCreators","counterActions"],"mappings":"wTAUA,IAAMA,EAAYC,IAAOC,IAAVC,KAITC,cACJ,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,IAAK,GAEPR,EAAKS,gBAAkBT,EAAKS,gBAAgBC,KAArBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACvBA,EAAKY,eAAiBZ,EAAKY,eAAeF,KAApBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANVA,+EASEa,GACdV,KAAKW,SAAS,CAAEN,KAAMK,EAAEE,OAAOC,iDAI/Bb,KAAKW,SAAS,CAAEN,IAAK,qCAGd,IAAAS,EAGHd,KAAKe,MADPC,EAFKF,EAELE,MAAOC,EAFFH,EAEEG,gBAAiBC,EAFnBJ,EAEmBI,gBAAiBC,EAFpCL,EAEoCK,aAEnCd,EAAQL,KAAKI,MAAbC,IACR,OACEe,EAAAC,EAAAC,cAAC9B,EAAD,KACE4B,EAAAC,EAAAC,cAAA,UACGN,GAEHI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,MAAM,WAAWC,QAAS,kBAAMR,EAAgBZ,MACxDe,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,MAAM,WAAWC,QAAS,kBAAMP,EAAgBb,MACxDe,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,QAASN,IAC/BC,EAAAC,EAAAC,cAAA,kEAGAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOG,KAAK,SAASb,MAAOR,EAAKsB,SAAU3B,KAAKM,gBAAiBsB,IAAK,IACtER,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,MAAM,qBAAqBC,QAASzB,KAAKS,yBApC1BoB,IAAMC,WA6DtBC,sBAZS,SAAA3B,GAAK,MAC3B,CACEY,MAAOZ,EAAM4B,QAAQhB,QAIE,SAAAiB,GAAQ,OAAAnC,OAAAoC,EAAA,EAAApC,CAAA,GAC9BqC,YAAmBrC,OAAAoC,EAAA,EAAApC,CAAA,GACjBsC,KACFH,KAGUF,CAA6CnC","file":"static/js/4.43b3472e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport styled from 'styled-components';\n\nimport { Button, Input } from '../../components';\n\nimport { actions as counterActions } from '../../sagaDucks/counter/counter';\n\nconst Container = styled.div`\n  display: inherit;\n`;\n\nclass CounterContainer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      val: 0,\n    };\n    this.customValChange = this.customValChange.bind(this);\n    this.customValReset = this.customValReset.bind(this);\n  }\n\n  customValChange(e) {\n    this.setState({ val: +e.target.value });\n  }\n\n  customValReset() {\n    this.setState({ val: 0 });\n  }\n\n  render() {\n    const {\n      total, counterIncrease, counterDecrease, counterReset,\n    } = this.props;\n    const { val } = this.state;\n    return (\n      <Container>\n        <h1>\n          {total}\n        </h1>\n        <Button label=\"Increase\" onClick={() => counterIncrease(val)} />\n        <Button label=\"Decrease\" onClick={() => counterDecrease(val)} />\n        <Button label=\"Reset\" onClick={counterReset} />\n        <p>\n          Input custom number to increase or decrease the total\n        </p>\n        <Input type=\"number\" value={val} onChange={this.customValChange} min={0} />\n        <br />\n        <Button label=\"Reset Custom Value\" onClick={this.customValReset} />\n      </Container>\n    );\n  }\n}\n\nCounterContainer.propTypes = {\n  total: PropTypes.number.isRequired,\n  counterIncrease: PropTypes.func.isRequired,\n  counterDecrease: PropTypes.func.isRequired,\n  counterReset: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => (\n  {\n    total: state.counter.total,\n  }\n);\n\nconst mapDispatchToProps = dispatch => ({\n  ...bindActionCreators({\n    ...counterActions,\n  }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CounterContainer);\n"],"sourceRoot":""}